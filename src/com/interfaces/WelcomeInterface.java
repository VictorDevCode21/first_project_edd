package com.interfaces;

import com.graph.BranchListener;
import java.awt.BorderLayout;
import javax.swing.JPanel;
import com.graph.LinkedList;
import com.graph.NetworkTrain;
import com.graph.PanelChangeListener;
import com.graph.Station;
import com.graph.StationLoadListener;
import com.graph.TValueListener;
import javax.swing.JOptionPane;

/**
 *
 * @author PC
 */


/**
 *  Clase que representa la interfaz de bienvenida de la aplicación.
 */
public class WelcomeInterface extends javax.swing.JFrame implements StationLoadListener, PanelChangeListener, TValueListener, BranchListener {

    private GUI gui;  // Instancia de GUI
    private boolean isGraphShown = false; // Variable para controlar si el grafo ha sido mostrado
    private NetworkTrain networkTrain; // Variablepara almacenar instancia de NetworkTrain
    private LinkedList<Station> stations; // Para almacenar estaciones cargadas
    private int tValue = -1; // Almacena el valor de T

    /**
     * Crea una nueva instancia de WelcomeInterface.
     */
    public WelcomeInterface() {
        initComponents();
        // Inicializa NetworkTrain al crear la WelcomeInterface
        this.networkTrain = new NetworkTrain();

        if (isGraphShown) {
            Page1 p1 = new Page1(gui);
            ShowPanel(p1);
        }

        if (gui != null) {
            gui.addBranchListener(this);
        }

    }

    /**
     * Muestra el panel especificado en el área de contenido.
     * 
     * @param p El panel a mostrar.
     */
    private void ShowPanel(JPanel p) {
        p.setSize(389, 178);
        p.setLocation(0, 0);

        content.removeAll();
        content.setLayout(new BorderLayout());
        content.add(p, BorderLayout.CENTER);
        content.revalidate();
        content.repaint();
    }

    /**
     * Método llamado cuando se cambia el panel.
     * 
     * @param newPanel El nuevo panel a mostrar.
     */
    @Override
    public void onChangePanel(JPanel newPanel) {
        ShowPanel(newPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        showGraphButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        addBranch = new javax.swing.JButton();
        addLineButton = new javax.swing.JButton();
        deleteBranch = new javax.swing.JButton();
        setT = new javax.swing.JButton();
        branchCoverage = new javax.swing.JButton();
        totalCoverage1 = new javax.swing.JButton();
        content = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setBackground(new java.awt.Color(51, 51, 51));
        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 51, 51));
        jLabel1.setText("Welcome to Transmetropolis");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, -1, -1));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jLabel2.setText("Options:");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 270, -1, -1));

        showGraphButton.setText("Show Graph");
        showGraphButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showGraphButtonActionPerformed(evt);
            }
        });
        jPanel1.add(showGraphButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 260, 110, 30));

        jPanel2.setBackground(new java.awt.Color(0, 51, 102));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addBranch.setText("Add Branch");
        addBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBranchActionPerformed(evt);
            }
        });
        jPanel2.add(addBranch, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 170, -1));

        addLineButton.setText("Add Line");
        addLineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addLineButtonActionPerformed(evt);
            }
        });
        jPanel2.add(addLineButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 170, -1));

        deleteBranch.setText("Delete Branch");
        deleteBranch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBranchActionPerformed(evt);
            }
        });
        jPanel2.add(deleteBranch, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 170, -1));

        setT.setText("Set T");
        setT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTActionPerformed(evt);
            }
        });
        jPanel2.add(setT, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 170, -1));

        branchCoverage.setText("Branch Coverage");
        branchCoverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                branchCoverageActionPerformed(evt);
            }
        });
        jPanel2.add(branchCoverage, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 170, -1));

        totalCoverage1.setText("Total Coverage");
        totalCoverage1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                totalCoverage1ActionPerformed(evt);
            }
        });
        jPanel2.add(totalCoverage1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, 170, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 300));

        content.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout contentLayout = new javax.swing.GroupLayout(content);
        content.setLayout(contentLayout);
        contentLayout.setHorizontalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 370, Short.MAX_VALUE)
        );
        contentLayout.setVerticalGroup(
            contentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 140, Short.MAX_VALUE)
        );

        jPanel1.add(content, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 70, 370, 140));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 540, 300));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Método llamado cuando cambian las sucursales.
     */
    @Override
    public void onBranchChanged() {
        
        updateBranchesDisplay(); // Método que actualiza la visualización de sucursales
    }

    /**
     * Método para actualizar la visualización de las sucursales.
     */
    private void updateBranchesDisplay() {
        LinkedList<Station> branches = gui.getBranches();
    }

    /**
     * Método llamado cuando se cargan las estaciones.
     * 
     * @param loadedStations La lista de estaciones cargadas.
     */
    @Override
    public void onStationsLoaded(LinkedList<Station> loadedStations) {
        // Aquí puedes manejar las estaciones cargadas
        // Por ejemplo, puedes guardarlas en una variable de instancia
        this.stations = loadedStations; // Asegúrate de tener un campo para guardar las estaciones en WelcomeInterface
    }

    /**
     * Método llamado cuando cambia el valor de T.
     * 
     * @param newT El nuevo valor de T.
     */
    @Override
    public void onTValueChanged(int newT) {
        this.tValue = newT;  // Almacena el valor T
        if (gui != null) {
            gui.setT(newT); // Actualiza el valor T en GUI
            // Si es necesario, aquí puedes llamar a gui.updateGraph();
            gui.updateGraph();
        }
    }


    /**
     * Muestra el grafo cuando se presiona el botón "Show Graph".
     * 
     * @param evt El evento de acción.
     */
    private void showGraphButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showGraphButtonActionPerformed
        // Verifica si tValue es -1 (no establecido)
        if (tValue == -1) {
            // Muestra un mensaje de error pidiendo al usuario que establezca T
            JOptionPane.showMessageDialog(this,
                    "Por favor, establezca un valor para T haciendo clic en el botón 'Set T'.",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;  // Sale del método si T no está establecido
        }

        if (gui == null) {  // Solo crea la instancia una vez
            gui = new GUI(networkTrain);
            gui.addStationLoadListener(this); // Agrega el listener aquí
            gui.setT(tValue);  // Establece el valor T almacenado
        }

        
        if (!gui.isVisible()) {
            gui.setVisible(true);  // Asegúrate de que solo se abra si no está visible
        } else {
            gui.requestFocus();  // Si ya está abierta, tráela al frente
        }

    }//GEN-LAST:event_showGraphButtonActionPerformed


    /**
 * Acción realizada cuando se presiona el botón "Add Branch".
 * Este método maneja el evento de acción generado por el botón "Add Branch".
 * Verifica si la red está cargada y, si es así, muestra el panel correspondiente.
 * Si la red no está cargada, muestra un mensaje de error.
 * 
 * @param evt El evento de acción generado por el botón.
 */
    
    private void addBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBranchActionPerformed

        try {
            checkNetworkLoaded();

            // Obtén la lista de sucursales desde GUI
//            LinkedList<Station> branches = gui.getBranches();

            Page1 p1 = new Page1(gui);
            ShowPanel(p1);
        } catch (Exception e) {
            // Maneja el error si checkNetworkLoaded lanza una excepción
            JOptionPane.showMessageDialog(this,
                    "Error: La red no está cargada correctamente. Por favor, cargue la red antes de proceder.",
                    "Error de carga de red", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addBranchActionPerformed

    
    /**
     * Acción realizada cuando se presiona el botón "Add Line".
     * 
     * @param evt El evento de acción.
     */
    private void addLineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addLineButtonActionPerformed
        try {
            checkNetworkLoaded();

            Page6 p6 = new Page6(gui, networkTrain);
            ShowPanel(p6);
        } catch (Exception e) {
            // Maneja el error si checkNetworkLoaded lanza una excepción
            JOptionPane.showMessageDialog(this,
                    "Error: La red no está cargada correctamente. Por favor, cargue la red antes de proceder.",
                    "Error de carga de red", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_addLineButtonActionPerformed

    
    /**
     * Acción realizada cuando se presiona el botón "Delete Branch".
     * 
     * @param evt El evento de acción.
     */
    private void deleteBranchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBranchActionPerformed
        try {
            checkNetworkLoaded();

            // Obtén la lista de sucursales desde GUI
//            LinkedList<Station> branches = gui.getBranches();

            // Pasa las sucursales a la interfaz Page3
            Page3 p3 = new Page3(gui);  // Le pasamos la lista de sucursales y la instancia de GUI
            ShowPanel(p3);  // Muestra la interfaz
        } catch (Exception e) {
            // Maneja el error si checkNetworkLoaded lanza una excepción
            JOptionPane.showMessageDialog(this,
                    "Error: La red no está cargada correctamente. Por favor, cargue la red antes de proceder.",
                    "Error de carga de red", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteBranchActionPerformed

    /**
     * Acción realizada cuando se presiona el botón "Set T".
     * 
     * @param evt El evento de acción.
     */
    private void setTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTActionPerformed

        Page4 p4 = new Page4(this);
        ShowPanel(p4);

    }//GEN-LAST:event_setTActionPerformed

    /**
     * Acción realizada cuando se presiona el botón "Branch Coverage".
    * 
    * @param evt El evento de acción.
    */
    private void branchCoverageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_branchCoverageActionPerformed
        try {
            // Verifica si la red está cargada correctamente
            checkNetworkLoaded();

            // Si la red está cargada, obten las branches
//            LinkedList<Station> branches = gui.getBranches();

            // Crea y muestra el panel Page5 con los datos
            Page5 p5 = new Page5(gui, networkTrain, this);
            ShowPanel(p5);

        } catch (Exception e) {
            // Maneja el error si checkNetworkLoaded lanza una excepción
            JOptionPane.showMessageDialog(this,
                    "Error: La red no está cargada correctamente. Por favor, cargue la red antes de proceder.",
                    "Error de carga de red", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_branchCoverageActionPerformed

    
    /**
     * Acción realizada cuando se presiona el botón "Total Coverage".
     * 
     * @param evt El evento de acción.
     */
    private void totalCoverage1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_totalCoverage1ActionPerformed
        try {
            // Verifica si la red está cargada correctamente
            checkNetworkLoaded();

            // Si la red está cargada, obten las branches
            LinkedList<Station> branches = gui.getBranches();

            // Crea y muestra el panel Page5 con los datos
            ShowTotalCoverage totalCoverage = new ShowTotalCoverage(this, gui);
            ShowPanel(totalCoverage);

        } catch (Exception e) {
            // Maneja el error si checkNetworkLoaded lanza una excepción
            JOptionPane.showMessageDialog(this,
                    "Error: La red no está cargada correctamente. Por favor, cargue la red antes de proceder.",
                    "Error de carga de red", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_totalCoverage1ActionPerformed

    /**
     * Revisa si las estaciones están cargadas correctamente.
     */
    private void checkNetworkLoaded() {
        try {
            // Verificar si gui es null
            if (this.gui == null) {
                System.out.println("Error: GUI no está inicializada.");
                isGraphShown = false;
                return; // Salir del método si gui es null
            }

            // Verificar si la red está cargada correctamente
            if (gui.isNetworkLoaded()) {
                isGraphShown = true; // Solo cambia a true si todo ha sido cargado correctamente
            } else {
                System.out.println("La red no está cargada.");
                isGraphShown = false; // Si hay error se mantiene en false
            }
        } catch (Exception e) {
            // Capturar cualquier excepción y mostrar un mensaje de error
            System.out.println("Ocurrió un error al verificar si la red está cargada: " + e.getMessage());
            isGraphShown = false; // Asegurarse de que el grafo no se muestre en caso de error
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WelcomeInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WelcomeInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WelcomeInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WelcomeInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new WelcomeInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBranch;
    private javax.swing.JButton addLineButton;
    private javax.swing.JButton branchCoverage;
    private javax.swing.JPanel content;
    private javax.swing.JButton deleteBranch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton setT;
    private javax.swing.JButton showGraphButton;
    private javax.swing.JButton totalCoverage1;
    // End of variables declaration//GEN-END:variables
}
