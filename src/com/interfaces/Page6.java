package com.interfaces;

import com.graph.LinkedList;
import com.interfaces.GUI;
import com.graph.NetworkTrain;
import com.graph.NetworkTrainListener;
import com.graph.PanelChangeListener;
import com.graph.Station;
import javax.swing.JOptionPane;

/**
 *
 * @author Joao
 */
 
 /**
  * Clase que representa la sexta página del panel de la GUI.
  */
public class Page6 extends javax.swing.JPanel  {

    private GUI gui;
    private NetworkTrain networkTrain;

    /**
     * Crea una nueva instancia de Page6.
     * 
     * @param gui La instancia de la GUI principal.
     * @param networkTrain La instancia de la red de trenes.
     */
    public Page6(GUI gui, NetworkTrain networkTrain) {
        this.gui = gui;
        this.networkTrain = gui.getNetworkTrain();
//        this.networkTrain.addListener(this); // Registra Page6 como listener
        initComponents();
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        addStations = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        inputStationsToAdd = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        inputConnectionsToAdd = new javax.swing.JTextField();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        addStations.setBackground(new java.awt.Color(153, 153, 153));
        addStations.setText("Add");
        addStations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStationsActionPerformed(evt);
            }
        });
        jPanel3.add(addStations, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 110, 60, 20));

        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("Introduzca las paradas a agregar separadas por coma \",\"");
        jPanel3.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, -1, -1));

        inputStationsToAdd.setBackground(new java.awt.Color(153, 153, 153));
        inputStationsToAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputStationsToAddActionPerformed(evt);
            }
        });
        jPanel3.add(inputStationsToAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 290, -1));

        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Introduzca las Conexiones a otras lineas: (Parada, Conexion)");
        jPanel3.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, -1, -1));

        inputConnectionsToAdd.setBackground(new java.awt.Color(153, 153, 153));
        inputConnectionsToAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputConnectionsToAddActionPerformed(evt);
            }
        });
        jPanel3.add(inputConnectionsToAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 80, 290, -1));

        add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 370, 140));
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Acción realizada cuando se presiona el botón para agregar estaciones.
     * 
     * @param evt El evento de acción.
     */
    private void addStationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStationsActionPerformed
        String stationsInput = inputStationsToAdd.getText();
        String connectionsInput = inputConnectionsToAdd.getText();

        // Dividir los inputs en arrays
        String[] stationsToAdd = stationsInput.split(",");
        String[] connectionsToAdd = connectionsInput.split(",");

        // Verificar si el número de conexiones es par
        if (connectionsToAdd.length % 2 != 0) {
            JOptionPane.showMessageDialog(null, "Error: El número de estaciones en las conexiones debe ser par.");
            return;
        }
        networkTrain.printStations();

        // Instancia de la red existente
        NetworkTrain network = gui.getNetworkTrain();

        // Agregar y conectar las nuevas estaciones secuencialmente
        Station previousStation = null;
        for (String stationName : stationsToAdd) {
            stationName = stationName.trim(); // Limpiar espacios en blanco

            // Verificar si la estación ya existe y agregarla si no
            if (!networkTrain.stationExists(stationName)) {
                networkTrain.addStation(stationName);
            }

            // Obtener la estación actual
            Station currentStation = networkTrain.getStationByName(stationName);
            if (currentStation == null) {
                JOptionPane.showMessageDialog(null, "Error: La estación " + stationName + " no pudo ser encontrada después de agregarla.");
                continue; // Saltar a la siguiente iteración si no se encuentra
            }

            // Conectar con la estación anterior si es necesario
            if (previousStation != null) {
                networkTrain.addConnection(previousStation.getName(), currentStation.getName());
            }

            // Actualizar la estación anterior
            previousStation = currentStation;
        }

        // Manejar las conexiones con estaciones existentes
        
        boolean connectionAdded=false; //variable para verificar que se añadió la conexión
        
        for (int i = 0; i < connectionsToAdd.length; i += 2) {
            String stationFrom = connectionsToAdd[i].trim();
            String stationTo = connectionsToAdd[i + 1].trim();

            // Validar las estaciones
            if (!networkTrain.stationExists(stationFrom)) {
                JOptionPane.showMessageDialog(null, "Error: La estación " + stationFrom + " no existe en la red.");
                continue;
            }

            if (!networkTrain.stationExists(stationTo)) {
                JOptionPane.showMessageDialog(null, "Error: La estación " + stationTo + " no existe en la red.");
                continue;
            }

            // Agregar la conexión entre la nueva estación y la estación existente
            networkTrain.addConnection(stationFrom, stationTo);
            connectionAdded=true;//la conexión es valida, se añadió
        }

        // Refrescar la visualización del grafo si se añadió una conexión
        if(connectionAdded){
         gui.updateGraph();
        }

    }//GEN-LAST:event_addStationsActionPerformed

    /**
     * Acción realizada cuando se ingresa una conexión.
     * 
     * @param evt El evento de acción.
     */
    private void inputConnectionsToAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputConnectionsToAddActionPerformed

    }//GEN-LAST:event_inputConnectionsToAddActionPerformed

    /**
     * Acción realizada cuando se ingresan estaciones.
     * 
     * @param evt El evento de acción.
     */
    private void inputStationsToAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputStationsToAddActionPerformed

    }//GEN-LAST:event_inputStationsToAddActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addStations;
    private javax.swing.JTextField inputConnectionsToAdd;
    private javax.swing.JTextField inputStationsToAdd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
